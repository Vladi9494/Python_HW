from typing import Literal
import pytest
from string_utils import StringUtils

string_utils = StringUtils()


@pytest.mark.positive
@pytest.mark.parametrize("input_str, expected", [
    ("skypro", "Skypro"),
    ("hello world", "Hello world"),
    ("python", "Python"),
    ("—Ç–µ—Å—Ç", "–¢–µ—Å—Ç"),
    ("123456", "123456"),    
    ("04 –∞–ø—Ä–µ–ª—è 2025", "04 –∞–ø—Ä–µ–ª—è 2025")
])
def test_capitalize_positive(input_str: Literal['skypro']
                             | Literal['hello world'] | Literal['python']
                             | Literal['—Ç–µ—Å—Ç'] | Literal['123456']                             
                             | Literal['04 –∞–ø—Ä–µ–ª—è 2025'],
                             expected: Literal['Skypro']
                             | Literal['Hello world'] | Literal['Python']
                             | Literal['–¢–µ—Å—Ç'] | Literal['123456']
                             | Literal['04 –∞–ø—Ä–µ–ª—è 2025']):
    assert string_utils.capitalize(input_str) == expected


@pytest.mark.negative
@pytest.mark.parametrize("input_str, expected", [
    ("123abc", "123abc"),  # —Ü–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–µ —Å –±—É–∫–≤–∞–º–∏ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
    (123456, 123456),  # –¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    "sky"123, "Sky"123),  # –°—Ç—Ä–æ–∫–∞ –∏ —Ü–∏—Ñ—Ä—ã.
    ("—ç—é—è456", "–≠—é—è456"),  # –±—É–∫–≤—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –≤–º–µ—Å—Ç–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏
    ("", ""),  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ("   ", "   "),  # —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    ("[]", "[]")  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
])
def test_capitalize_negative(input_str: Literal['123abc']
                             | Literal[123456] | Literal['Sky123']
                             | Literal[''] | Literal['   '],
                             expected: Literal['123abc']
                             | Literal[123456]
                             | Literal[''] | Literal['   ']):
    assert string_utils.capitalize(input_str) == expected

########################


@pytest.mark.positive
@pytest.mark.parametrize("input_str, expected", [
    (" skypro", "skypro"),  # –°—Ç—Ä–æ–∫–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
    ("    SKYPRO", "SKYPRO"),  # –°—Ç—Ä–æ–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
    ("  123", "123"),  # –ß–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞.
    ("   –¢–µ—Å—Ç", "–¢–µ—Å—Ç"),  # –ù–µ –ø—É—Å—Ç–∞—è —Å—Ä–æ–∫–∞.
    ("    4 –∞–ø—Ä–µ–ª—è 2023", "4 –∞–ø—Ä–µ–ª—è 2023"),  # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ü–∏—Ñ—Ä—ã –∏
                                             # –±—É–∫–≤—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ.
    ("       07_november_1917", "07_november_1917"),  # –î–∞–ª–µ–µ - –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è
                                                      # —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ ‚Üì
    ("                                                            456", "456"),
    ("                      ü´°üôÇ‚ò∫Ô∏èü§î", "ü´°üôÇ‚ò∫Ô∏èü§î"),  # –°—Ç—Ä–æ–∫–∞ —Å–æ –∑–Ω–∞–∫–∞–º–∏ —ç–º–æ–¥–∑–∏.
    ("   (‚ùÅ¬¥‚ó°`‚ùÅ)¬•¬©‚Üê„Éæ(‚âß‚ñΩ‚â¶*)o", "(‚ùÅ¬¥‚ó°`‚ùÅ)¬•¬©‚Üê„Éæ(‚âß‚ñΩ‚â¶*)o")  # –°—Ç—Ä–æ–∫–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏.
])
def test_trim_positive(input_str: Literal[' skypro'] | Literal['    SKYPRO']
                       | Literal['  123'] | Literal['   –¢–µ—Å—Ç']
                       | Literal['    4 –∞–ø—Ä–µ–ª—è 2023']
                       | Literal['       07_november_1917']
                       | Literal['                        ü´°üôÇ‚ò∫Ô∏èü§î']
                       | Literal['      (‚ùÅ¬¥‚ó°`‚ùÅ)¬•¬©‚Üêüö≤üöÇ„Éæ(‚âß‚ñΩ‚â¶*)o'],
                       expected: Literal['skypro'] | Literal['SKYPRO']
                       | Literal['123'] | Literal['–¢–µ—Å—Ç']
                       | Literal['4 –∞–ø—Ä–µ–ª—è 2023']
                       | Literal['07_november_1917']
                       | Literal['456'] | Literal['ü´°üôÇ‚ò∫Ô∏èü§î']
                       | Literal['(‚ùÅ¬¥‚ó°`‚ùÅ)¬•¬©‚Üêüö≤üöÇ„Éæ(‚âß‚ñΩ‚â¶*)o']):
    assert string_utils.trim(input_str) == expected


@pytest.mark.negative
@pytest.mark.parametrize("input_str, expected", [ 
    ("  123abc", "123abc"),  # –¶–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–µ —Å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.
    (  123456, 123456),  # –¶–∏—Ñ—Ä–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
      "–ê–ë–í"123, "–ê–ë–í"123),  # –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–µ.
    ("   ", ""),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
    ("   []", "[]")  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.  
])
def test_trim_negative (input_str: Literal['  123abc']
                       | Literal[  123456] | Literal[  "–ê–ë–í"123],
                       expected: Literal['123abc'] | Literal[123456]
                       | Literal["–ê–ë–í"123] | Literal['']
                       | Literal['[]']):
    assert string_utils.trim(input_str) == expected

########################
# | Literal['   '] | Literal['   []'],
#("" + None, None), –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —Å–∫–ª–µ–∏—Ç—å —Å—Ç—Ä–æ–∫—É "" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ None
#    ("  None", "None") –∏–ª–∏ ("" + "None", "None"):
                        # None –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –≤ —Å–ª–æ–≤–æ "None",
                        # –∞ –Ω–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ None???
    # ("", "") –∏–ª–∏ ("" + "", "")  –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º
    # (–æ—à–∏–±–∫–∞:–¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω—É–∂–Ω–æ
    # –ø—Ä–∏–º–µ–Ω—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é repr())???

@pytest.mark.positive
@pytest.mark.parametrize("string, symbol, result", [
    ("SkyPro", "P", True),
    ("SkyPro", "p", False),  # –ò—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –≤ —Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
    ("SkyPro", "U", False),  # –ù–µ –≤–µ—Ä–Ω—ã–π –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª.
    ("skypro", "pro", True)  # –°–ª–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–¥—É—â–∏–π
                             # –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω.
])
def test_contains_positive(string, symbol, result):
    lokal_string_utils = StringUtils()
    res = lokal_string_utils.contains(string, symbol)
    assert res == result


@pytest.fixture
@pytest.mark.negative
@pytest.mark.paramerize("string, symbol, result", [
    ("–æ–≥–æ—Ä–æ–¥", "–æ–≥–æ—Ä–æ–¥", True),
    ("–º–∞—à–∏–Ω–∞", " ", False),
    (123456, 123456, True),  # –¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    (20"SkyPro"25, 20"SkyPro"25, True),  # –¶–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã –≤–º–µ—Å—Ç–µ.
    ("–æ–≥–æ—Ä–æ–¥", "–¥–æ—Ä–æ–≥–æ", False),  # –°–ª–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∫–∞–∫
                                  # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ, –µ—Å–ª–∏ –∏–¥—É—Ç –Ω–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ
                                  # –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ.
#   ("–æ–≥–æ—Ä–æ–¥", "–æ–æ–æ", False),      –°–ª–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫
                                  # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω, –≤ —Ç–æ–º
                                  # –ø–æ—Ä—è–¥–∫–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ.
    ("–ú–∞—à–∏–Ω–∞", " –ú", False),   # –°–∏–º–≤–æ–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ ‚Üì
    ("–º–∞—à–∏–Ω–∞", "–º –∞", False),  # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω —Å –ø—Ä–æ–±–µ–ª–æ–º.
    ("–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω–∞–∞", False)  # –°–ª–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª —Å –æ—à–∏–±–∫–æ–π
                                  # –≤ –æ–¥–Ω—É –±—É–∫–≤—É –ø–æ –¥–ª–∏–Ω–µ.
])
def test_contains_negative(string, symbol, result):
    lokal_string_utils = StringUtils()
    res = lokal_string_utils.contains(string, symbol)
    assert res == result

########################


@pytest.fixture
@pytest.mark.positive
@pytest.mark.parametrize("input_string, input_symbol, expected", [
    ("SkyPro", "k", "SyPro"),  # –û–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
    ("SkyPro", "Sky", "Pro"),  # –°–∏–º–≤–æ–ª —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ç—Ä–µ—Ö –±—É–∫–≤ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    ("Hello world", "Hello", "world"),  # –°–ª–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    ("Python ", "Python", " "),  # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    ("–¢–µ—Å—Ç", "–¢–µ—Å—Ç", ""),  # –°–∏–º–≤–æ–ª –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Ä–∞–≤–µ–Ω —Å—Ç—Ä–æ–∫–µ
    ("123456", "2345", "16"),  # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ü–∏—Ñ—Ä
    ("04 –∞–ø—Ä–µ–ª—è 2025", "–∞–ø—Ä–µ–ª—è", "04  2025")  # –°—Ç—Ä–æ–∫–∞ –≤–∫–ª—é—á–∞—é—â–∞—è –ø—Ä–æ–±–µ–ª—ã
    ])
def test_delete_symbol_positive(input_str: Literal['SkyPro']
                                | Literal['Hello world'] | Literal['Python ']
                                | Literal['–¢–µ—Å—Ç'] | Literal['123456']
                                | Literal['04 –∞–ø—Ä–µ–ª—è 2025'],
                                input_symbol: Literal['k'] | Literal['Sky']
                                | Literal['Hello'] | Literal['Python']
                                | Literal['–¢–µ—Å—Ç'] | Literal['2345']
                                | Literal['–∞–ø—Ä–µ–ª—è'],
                                expected: Literal['SyPro'] | Literal['Pro']
                                | Literal['world'] | Literal[' ']
                                | Literal[''] | Literal['16']
                                | Literal['04  2025']):
    assert string_utils.delete_symbol(input_str) == expected
#   return fixture_marker(fixture_function)


@pytest.fixture
@pytest.mark.negative
@pytest.mark.parametrize("input_string, in put_symbol, expected", [
    ("Sky123", "y1", "Sk23"),  # –±—É–∫–≤—ã –≤–º–µ—Å—Ç–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏, –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (201"SkyPro"125, 1"SkyPro"1, 2025),  # –¶–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã –≤–º–µ—Å—Ç–µ.
    ("      ", "  ", "    "),  # —Å—Ç—Ä–æ–∫–∞ –∏ —Å–∏–º–≤–æ–ª —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –æ–¥–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    ("", "", ""),  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    (None, None, None),  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "None"
    (123456, 2345, 16),  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    # (üòäüòíü§£ü§îüòïüôÉ, üòíü§£ü§îüòïüôÉ, üòä), —Å—Ç—Ä–æ–∫–∞ –∏ —Å–∏–º–≤–æ–ª —Å–æ—Å—Ç–æ—è—â–∏–µ
                                           # –∏–∑ —ç–º–æ–¥–∑–∏ –Ω–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                                           # (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
    ("‚úçÔ∏è: üëå –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ –ª—É—á—à–µ: üëç",  "‚úçÔ∏è: üëå –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ –ª—É—á—à–µ:", "üëç")
])
def test_delete_symbol_negative(input_str: Literal['Sky123']
                                | Literal[201'SkyPro'125]
                                | Literal['      '] | Literal['']
                                | Literal[None] | Literal[123456]
                                | Literal[üòäüòíü§£ü§îüòïüôÉ]
                                | Literal['‚úçÔ∏è: üëå –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ –ª—É—á—à–µ: üëç'],
                                input_symbol: Literal['y1']
                                | Literal [1'SkyPro'1]
                                | Literal['  '] | Literal['']
                                | Literal[None] | Literal[2345]
                                | Literal[üòíü§£ü§îüòïüôÉ]
                                | Literal['‚úçÔ∏è: üëå –∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ –ª—É—á—à–µ:'],
                                expected: Literal['Sk23'] | Literal[2025]
                                | Literal['    '] | Literal['']
                                | Literal[None] | Literal[16]
                                | Literal[üòä]
                                | Literal['üëç']):
    assert string_utils.delete_symbol(input_str) == expected
#   return fixture_marker(fixture_function)